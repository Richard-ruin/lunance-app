version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: lunance_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: lunance
    volumes:
      - mongodb_data:/data/db
      - ./data/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - lunance_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and sessions (optional)
  redis:
    image: redis:7.2-alpine
    container_name: lunance_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - lunance_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # FastAPI Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lunance_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Application Settings
      DEBUG: "True"
      APP_NAME: "Lunance Finance Tracker"
      APP_VERSION: "1.0.0"
      LOG_LEVEL: "INFO"
      
      # Database
      MONGODB_URL: "mongodb://admin:admin123@mongodb:27017/lunance?authSource=admin"
      DATABASE_NAME: "lunance"
      
      # Security
      SECRET_KEY: "your-super-secret-key-change-this-in-production-minimum-32-characters"
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      
      # Email Settings (update with your SMTP credentials)
      SMTP_SERVER: "smtp.gmail.com"
      SMTP_PORT: "587"
      SMTP_USERNAME: "your-email@gmail.com"
      SMTP_PASSWORD: "your-app-password"
      EMAIL_FROM: "noreply@lunance.com"
      EMAIL_FROM_NAME: "Lunance Finance"
      
      # OTP Settings
      OTP_EXPIRE_MINUTES: "10"
      OTP_MAX_ATTEMPTS: "3"
      
      # Account Security
      MAX_LOGIN_ATTEMPTS: "5"
      ACCOUNT_LOCKOUT_DURATION: "30"
      
      # Redis (optional)
      REDIS_URL: "redis://:redis123@redis:6379/0"
      
      # CORS
      BACKEND_CORS_ORIGINS: "http://localhost:3000,http://localhost:8080,http://localhost:5173"
    volumes:
      - ./static:/app/static
      - ./logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lunance_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: lunance_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./static:/var/www/static:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - lunance_network

  # MongoDB Express (optional - for database management)
  mongo-express:
    image: mongo-express:latest
    container_name: lunance_mongo_express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - lunance_network

  # Redis Commander (optional - for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: lunance_redis_commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: "local:redis:6379:0:redis123"
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - lunance_network

  # Celery Worker (optional - for background tasks)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lunance_celery_worker
    restart: unless-stopped
    command: celery -A app.workers.celery_app worker --loglevel=info
    environment:
      # Same environment as backend
      DEBUG: "True"
      MONGODB_URL: "mongodb://admin:admin123@mongodb:27017/lunance?authSource=admin"
      DATABASE_NAME: "lunance"
      SECRET_KEY: "your-super-secret-key-change-this-in-production-minimum-32-characters"
      REDIS_URL: "redis://:redis123@redis:6379/0"
      CELERY_BROKER_URL: "redis://:redis123@redis:6379/1"
      CELERY_RESULT_BACKEND: "redis://:redis123@redis:6379/2"
    volumes:
      - ./static:/app/static
      - ./logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lunance_network

  # Celery Beat (optional - for scheduled tasks)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lunance_celery_beat
    restart: unless-stopped
    command: celery -A app.workers.celery_app beat --loglevel=info
    environment:
      # Same environment as backend
      DEBUG: "True"
      MONGODB_URL: "mongodb://admin:admin123@mongodb:27017/lunance?authSource=admin"
      DATABASE_NAME: "lunance"
      SECRET_KEY: "your-super-secret-key-change-this-in-production-minimum-32-characters"
      REDIS_URL: "redis://:redis123@redis:6379/0"
      CELERY_BROKER_URL: "redis://:redis123@redis:6379/1"
      CELERY_RESULT_BACKEND: "redis://:redis123@redis:6379/2"
    volumes:
      - ./celerybeat-schedule:/app/celerybeat-schedule
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lunance_network

  # Flower (optional - for Celery monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lunance_flower
    restart: unless-stopped
    command: celery -A app.workers.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: "redis://:redis123@redis:6379/1"
      CELERY_RESULT_BACKEND: "redis://:redis123@redis:6379/2"
      FLOWER_BASIC_AUTH: "admin:admin123"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - lunance_network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  lunance_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Development override
# To use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up